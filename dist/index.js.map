{
  "version": 3,
  "sources": ["../index.ts", "../Fetcher.ts"],
  "sourcesContent": ["import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport { GitHubFetcher } from './Fetcher';\r\n\r\nexport interface FirstEverythingResult {\r\n    username: string;\r\n    accountCreated?: string | null;\r\n    firstRepository?: { name: string; created_at: string } | null;\r\n    firstCommit?: {\r\n        sha: string;\r\n        commit: { author?: { date?: string }; committer?: { date?: string } };\r\n    } | null;\r\n    firstGist?: { id: string; created_at: string } | null;\r\n    firstStarredRepo?: { full_name: string; starred_at?: string; created_at?: string } | null;\r\n    firstWorkflowRun?: { name: string; created_at: string } | null;\r\n    firstFork?: { name: string; created_at: string } | null;\r\n    firstOrganization?: { login: string } | null;\r\n    firstFollowing?: { login: string } | null;\r\n    firstFollower?: { login: string } | null;\r\n    firstPublicEvent?: { type: string; created_at: string } | null;\r\n    firstRelease?: { tag_name: string; created_at: string } | null;\r\n    firstComment?: { issue_number: number; created_at: string } | null;\r\n    firstWatch?: { full_name: string; created_at: string } | null;\r\n    firstContribution?: { type: string; repo: string; created_at: string } | null;\r\n    firstIssue?: { issue_number: number, created_at: string } | null;\r\n    firstPullRequest?: { pr_number: number, created_at: string } | null;\r\n}\r\n\r\nfunction formatDate(val?: string | Date): string {\r\n    if (!val) return 'Unknown date';\r\n    try {\r\n        return new Date(val as string).toLocaleDateString();\r\n    } catch {\r\n        return String(val);\r\n    }\r\n}\r\n\r\nfunction generateSummary(results: FirstEverythingResult): string {\r\n    const lines: string[] = [];\r\n    lines.push(`\uD83D\uDCCA First Everything Report for @${results.username}`);\r\n    lines.push('='.repeat(60));\r\n\r\n    if (results.accountCreated)\r\n        lines.push(`\uD83D\uDC64 Account created: ${formatDate(results.accountCreated)}`);\r\n\r\n    if (results.firstRepository)\r\n        lines.push(\r\n            `\uD83D\uDCC2 First repository: ${results.firstRepository.name} (${formatDate(\r\n                results.firstRepository.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstCommit) {\r\n        const dateStr =\r\n            results.firstCommit.commit.author?.date ??\r\n            results.firstCommit.commit.committer?.date ??\r\n            'Unknown date';\r\n        lines.push(\r\n            `\uD83D\uDCBE First commit: ${results.firstCommit.sha.substring(0, 7)} (${formatDate(\r\n                dateStr\r\n            )})`\r\n        );\r\n    }\r\n\r\n    if (results.firstIssue)\r\n        lines.push(\r\n            `\uD83D\uDC1B First issue: #${results.firstIssue.issue_number} (${formatDate(\r\n                results.firstIssue.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstPullRequest)\r\n        lines.push(\r\n            `\uD83D\uDD00 First PR: #${results.firstPullRequest.pr_number} (${formatDate(\r\n                results.firstPullRequest.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstGist)\r\n        lines.push(\r\n            `\uD83D\uDCDD First gist: ${results.firstGist.id} (${formatDate(\r\n                results.firstGist.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstStarredRepo) {\r\n        const dateToUse =\r\n            results.firstStarredRepo.starred_at ??\r\n            results.firstStarredRepo.created_at ??\r\n            'Unknown date';\r\n        lines.push(\r\n            `\u2B50 First starred repo: ${results.firstStarredRepo.full_name} (${formatDate(\r\n                dateToUse\r\n            )})`\r\n        );\r\n    }\r\n\r\n    if (results.firstWorkflowRun)\r\n        lines.push(\r\n            `\u26A1 First workflow run: ${results.firstWorkflowRun.name} (${formatDate(\r\n                results.firstWorkflowRun.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstFork)\r\n        lines.push(\r\n            `\uD83C\uDF74 First fork: ${results.firstFork.name} (${formatDate(\r\n                results.firstFork.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstOrganization)\r\n        lines.push(`\uD83C\uDFE2 First organization: ${results.firstOrganization.login}`);\r\n\r\n    if (results.firstFollowing)\r\n        lines.push(`\uD83D\uDC65 First following: ${results.firstFollowing.login}`);\r\n\r\n    if (results.firstFollower)\r\n        lines.push(`\uD83D\uDC65 First follower: ${results.firstFollower.login}`);\r\n\r\n    if (results.firstPublicEvent)\r\n        lines.push(\r\n            `\uD83D\uDCC5 First public event: ${results.firstPublicEvent.type} (${formatDate(\r\n                results.firstPublicEvent.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstRelease)\r\n        lines.push(\r\n            `\uD83D\uDE80 First release: ${results.firstRelease.tag_name} (${formatDate(\r\n                results.firstRelease.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstComment)\r\n        lines.push(\r\n            `\uD83D\uDCAC First comment: On issue #${results.firstComment.issue_number} (${formatDate(\r\n                results.firstComment.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstWatch)\r\n        lines.push(\r\n            `\uD83D\uDC40 First watched repo: ${results.firstWatch.full_name} (${formatDate(\r\n                results.firstWatch.created_at\r\n            )})`\r\n        );\r\n\r\n    if (results.firstContribution)\r\n        lines.push(\r\n            `\uD83E\uDD1D First contribution: ${results.firstContribution.type} to ${results.firstContribution.repo} (${formatDate(\r\n                results.firstContribution.created_at\r\n            )})`\r\n        );\r\n\r\n    const found = Object.keys(results).filter(\r\n        (k) => k !== 'username' && results[k as keyof FirstEverythingResult] != null\r\n    ).length;\r\n    lines.push(`\\n\uD83D\uDD0D Found ${found} different \"first\" items!`);\r\n\r\n    return lines.join('\\n');\r\n}\r\n\r\nasync function run(): Promise<void> {\r\n    try {\r\n        const username = core.getInput('username', { required: true }).trim();\r\n        const token = core.getInput('token', { required: true }).trim();\r\n        const octokit = github.getOctokit(token);\r\n        const context = github.context;\r\n        const ref = context.ref;\r\n        const eventBranch = ref.replace(/^refs\\/[^/]+\\//, '');\r\n        if (!username) throw new Error('Username cannot be empty');\r\n        if (!token) throw new Error('Token cannot be empty');\r\n\r\n        // Basic GitHub username validation (same as before)\r\n        const usernameRegex = /^[a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38}$/i;\r\n        if (!usernameRegex.test(username))\r\n            throw new Error('Invalid GitHub username format');\r\n\r\n        core.info(`\uD83D\uDD0D Analyzing GitHub user: ${username}`);\r\n\r\n        const fetcher = new GitHubFetcher();\r\n        const results = await fetcher.fetchFirstEverything(username, token);\r\n        const summary = generateSummary(results);\r\n\r\n        core.setOutput('results', JSON.stringify(results, null, 2));\r\n        core.setOutput('summary', summary);\r\n\r\n        const fs = await import('fs');\r\n        const path = await import('path');\r\n        const summaryPath = path.resolve(process.env.GITHUB_STEP_SUMMARY || '');\r\n        if (summaryPath) {\r\n            const current = await fs.promises.readFile(summaryPath, 'utf8');\r\n            await fs.promises.writeFile(summaryPath, current + '\\n' + summary);\r\n        }\r\n\r\n        core.info(summary);\r\n        core.info('\u2705 Successfully fetched all first items!');\r\n    } catch (e) {\r\n        const err = e instanceof Error ? e.message : String(e);\r\n        core.setFailed(err);\r\n    }\r\n}\r\n\r\nif (require.main === module) {\r\n    run();\r\n}", "import * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nimport { FirstEverythingResult } from './index';\r\n\r\nexport class GitHubFetcher {\r\n    private octokit: any;\r\n    private username: string = '';\r\n\r\n    // constructor(token: string) {\r\n    //     this.octokit = new Octokit({\r\n    //         auth: token,\r\n    //         userAgent: 'github-first-everything',\r\n    //     });\r\n    // }\r\n    async fetchFirstEverything(username: string, token: string): Promise<FirstEverythingResult> {\r\n        this.username = username;\r\n        this.octokit = github.getOctokit(token);\r\n        const result: FirstEverythingResult = { username };\r\n\r\n        try {\r\n            // 1. Account creation date\r\n            result.accountCreated = await this.getAccountCreated();\r\n\r\n            // 2. First repository\r\n            result.firstRepository = await this.getFirstRepository();\r\n\r\n            // 3. First commit (across all repos \u2013 simplified: first commit in first repo)\r\n            result.firstCommit = await this.getFirstCommit();\r\n\r\n            // 4. First issue\r\n            result.firstIssue = await this.getFirstIssue();\r\n\r\n            // 5. First pull request\r\n            result.firstPullRequest = await this.getFirstPullRequest();\r\n\r\n            // 6. First gist\r\n            result.firstGist = await this.getFirstGist();\r\n\r\n            // 7. First starred repo\r\n            result.firstStarredRepo = await this.getFirstStarredRepo();\r\n\r\n            // 8. First workflow run\r\n            result.firstWorkflowRun = await this.getFirstWorkflowRun();\r\n\r\n            // 9. First fork\r\n            result.firstFork = await this.getFirstFork();\r\n\r\n            // 10. First organization\r\n            result.firstOrganization = await this.getFirstOrganization();\r\n\r\n            // 11. First following\r\n            result.firstFollowing = await this.getFirstFollowing();\r\n\r\n            // 12. First follower\r\n            result.firstFollower = await this.getFirstFollower();\r\n\r\n            // 13. First public event\r\n            result.firstPublicEvent = await this.getFirstPublicEvent();\r\n\r\n            // 14. First release\r\n            result.firstRelease = await this.getFirstRelease();\r\n\r\n            // 15. First comment\r\n            result.firstComment = await this.getFirstComment();\r\n\r\n            // 16. First watched repo\r\n            result.firstWatch = await this.getFirstWatch();\r\n\r\n            // 17. First contribution to someone else's repo\r\n            result.firstContribution = await this.getFirstContribution();\r\n        } catch (e) {\r\n            core.warning(`Partial fetch \u2013 some data may be missing: ${e}`);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private async getAccountCreated(): Promise<string | null> {\r\n        const { data } = await this.octokit.users.getByUsername({\r\n            username: this.username,\r\n        });\r\n        return data.created_at ?? null;\r\n    }\r\n    private async getFirstRepository(): Promise<\r\n        { name: string; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.repos.listForUser({\r\n            username: this.username,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n            per_page: 1,\r\n        });\r\n        return data?.[0]\r\n            ? { name: data[0].name!, created_at: data[0].created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstCommit(): Promise<\r\n        | {\r\n            sha: string;\r\n            commit: { author?: { date?: string }; committer?: { date?: string } };\r\n        }\r\n        | null\r\n    > {\r\n        const firstRepo = await this.getFirstRepository();\r\n        if (!firstRepo) return null;\r\n\r\n        const { data } = await this.octokit.repos.listCommits({\r\n            owner: this.username,\r\n            repo: firstRepo.name,\r\n            per_page: 1,\r\n            sort: 'author-date',\r\n            direction: 'asc',\r\n        });\r\n        const commit = data?.[0];\r\n        return commit\r\n            ? {\r\n                sha: commit.sha!,\r\n                commit: commit.commit!,\r\n            }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstIssue(): Promise<\r\n        { issue_number: number; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.search.issuesAndPullRequests({\r\n            q: `author:${this.username}+type:issue`,\r\n            sort: 'created',\r\n            order: 'asc',\r\n            per_page: 1,\r\n        });\r\n        const issue = data?.items?.[0];\r\n        return issue\r\n            ? { issue_number: issue.number!, created_at: issue.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstPullRequest(): Promise<\r\n        { pr_number: number; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.search.issuesAndPullRequests({\r\n            q: `author:${this.username}+type:pr`,\r\n            sort: 'created',\r\n            order: 'asc',\r\n            per_page: 1,\r\n        });\r\n        const pr = data?.items?.[0];\r\n        return pr\r\n            ? { pr_number: pr.number!, created_at: pr.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstGist(): Promise<\r\n        { id: string; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.gists.listForUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n        });\r\n        const gist = data?.[0];\r\n        return gist\r\n            ? { id: gist.id!, created_at: gist.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstStarredRepo(): Promise<\r\n        { full_name: string; starred_at?: string; created_at?: string } | null\r\n    > {\r\n        const { data } = await this.octokit.activity.listReposStarredByUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n        });\r\n        const repo = data?.[0];\r\n        if (!repo) return null;\r\n\r\n        // GitHub API v3 does not expose `starred_at` in this endpoint.\r\n        // We approximate it with the repository\u2019s created_at.\r\n        return {\r\n            full_name: repo.full_name!,\r\n            created_at: repo.created_at!,\r\n        };\r\n    }\r\n\r\n    private async getFirstWorkflowRun(): Promise<\r\n        { name: string; created_at: string } | null\r\n    > {\r\n        // The Actions Runs API is available to authenticated users.\r\n        const { data } = await this.octokit.actions.listWorkflowRunsForUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n        });\r\n        const run = data?.workflow_runs?.[0];\r\n        return run\r\n            ? { name: run.name ?? 'Unnamed', created_at: run.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstFork(): Promise<\r\n        { name: string; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.repos.listForUser({\r\n            username: this.username,\r\n            type: 'forks',\r\n            sort: 'created',\r\n            direction: 'asc',\r\n            per_page: 1,\r\n        });\r\n        const repo = data?.[0];\r\n        return repo\r\n            ? { name: repo.name!, created_at: repo.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstOrganization(): Promise<{ login: string } | null> {\r\n        const { data } = await this.octokit.orgs.listForUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n        });\r\n        const org = data?.[0];\r\n        return org ? { login: org.login! } : null;\r\n    }\r\n\r\n    private async getFirstFollowing(): Promise<{ login: string } | null> {\r\n        const { data } = await this.octokit.users.listFollowingForAuthenticatedUser({\r\n            per_page: 1,\r\n        });\r\n        const user = data?.[0];\r\n        return user ? { login: user.login! } : null;\r\n    }\r\n\r\n    private async getFirstFollower(): Promise<{ login: string } | null> {\r\n        const { data } = await this.octokit.users.listFollowersForUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n        });\r\n        const user = data?.[0];\r\n        return user ? { login: user.login! } : null;\r\n    }\r\n\r\n    private async getFirstPublicEvent(): Promise<\r\n        { type: string; created_at: string } | null\r\n    > {\r\n        const perPage = 100;\r\n        let page = 1;\r\n        let earliest: { type: string; created_at: string } | null = null;\r\n\r\n        while (true) {\r\n            const { data } = await this.octokit.activity.listPublicEventsForUser({\r\n                username: this.username,\r\n                per_page: perPage,\r\n                page,\r\n            });\r\n            if (!data.length) break;\r\n\r\n            // Find the oldest event on this page\r\n            const oldestOnPage = data[data.length - 1];\r\n            earliest = {\r\n                type: oldestOnPage.type!,\r\n                created_at: oldestOnPage.created_at!,\r\n            };\r\n\r\n            // If we got less than a full page, we\u2019re done\r\n            if (data.length < perPage) break;\r\n            page++;\r\n        }\r\n\r\n        return earliest;\r\n    }\r\n\r\n    private async getFirstRelease(): Promise<\r\n        { tag_name: string; created_at: string } | null\r\n    > {\r\n        const firstRepo = await this.getFirstRepository();\r\n        if (!firstRepo) return null;\r\n\r\n        const { data } = await this.octokit.repos.listReleases({\r\n            owner: this.username,\r\n            repo: firstRepo.name,\r\n            per_page: 1,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n        });\r\n        const release = data?.[0];\r\n        return release\r\n            ? { tag_name: release.tag_name!, created_at: release.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstComment(): Promise<\r\n        { issue_number: number; created_at: string } | null\r\n    > {\r\n        // Search comments authored by the user\r\n        const { data } = await this.octokit.search.issuesAndPullRequests({\r\n            q: `commenter:${this.username}`,\r\n            sort: 'created',\r\n            order: 'asc',\r\n            per_page: 1,\r\n        });\r\n        const comment = data?.items?.[0];\r\n        return comment\r\n            ? { issue_number: comment.number!, created_at: comment.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstWatch(): Promise<\r\n        { full_name: string; created_at: string } | null\r\n    > {\r\n        const { data } = await this.octokit.activity.listReposWatchedByUser({\r\n            username: this.username,\r\n            per_page: 1,\r\n            sort: 'created',\r\n            direction: 'asc',\r\n        });\r\n        const repo = data?.[0];\r\n        return repo\r\n            ? { full_name: repo.full_name!, created_at: repo.created_at! }\r\n            : null;\r\n    }\r\n\r\n    private async getFirstContribution(): Promise<\r\n        { type: string; repo: string; created_at: string } | null\r\n    > {\r\n        // Search for the earliest PR the user opened *on someone else\u2019s repo*\r\n        const { data } = await this.octokit.search.issuesAndPullRequests({\r\n            q: `author:${this.username}+type:pr`,\r\n            sort: 'created',\r\n            order: 'asc',\r\n            per_page: 1,\r\n        });\r\n        const pr = data?.items?.[0];\r\n        if (!pr) return null;\r\n\r\n        const repo = pr.repository_url?.replace(\r\n            'https://api.github.com/repos/',\r\n            ''\r\n        );\r\n        return {\r\n            type: 'PR',\r\n            repo: repo ?? 'unknown',\r\n            created_at: pr.created_at!,\r\n        };\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["index_exports", "__toCommonJS", "core", "github", "core", "github", "GitHubFetcher", "username", "token", "result", "e", "data", "firstRepo", "commit", "issue", "pr", "gist", "repo", "run", "org", "user", "page", "earliest", "oldestOnPage", "release", "comment", "formatDate", "val", "generateSummary", "results", "lines", "dateStr", "dateToUse", "found", "k", "run", "username", "token", "octokit", "eventBranch", "GitHubFetcher", "summary", "fs", "summaryPath", "current", "e", "err"]
}
