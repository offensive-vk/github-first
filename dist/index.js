"use strict";var y=Object.create;var f=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var h=(t,e,r,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of b(e))!P.call(t,a)&&a!==r&&f(t,a,{get:()=>e[a],enumerable:!(i=R(e,a))||i.enumerable});return t};var o=(t,e,r)=>(r=t!=null?y(k(t)):{},h(e||!t||!t.__esModule?f(r,"default",{value:t,enumerable:!0}):r,t)),v=t=>h(f({},"__esModule",{value:!0}),t);var E={};module.exports=v(E);var n=o(require("@actions/core")),u=o(require("@actions/github"));var _=o(require("@actions/core")),F=o(require("@actions/github")),c=class{octokit;username="";async fetchFirstEverything(e,r){this.username=e,this.octokit=F.getOctokit(r);let i={username:e};try{i.accountCreated=await this.getAccountCreated(),i.firstRepository=await this.getFirstRepository(),i.firstCommit=await this.getFirstCommit(),i.firstIssue=await this.getFirstIssue(),i.firstPullRequest=await this.getFirstPullRequest(),i.firstGist=await this.getFirstGist(),i.firstStarredRepo=await this.getFirstStarredRepo(),i.firstWorkflowRun=await this.getFirstWorkflowRun(),i.firstFork=await this.getFirstFork(),i.firstOrganization=await this.getFirstOrganization(),i.firstFollowing=await this.getFirstFollowing(),i.firstFollower=await this.getFirstFollower(),i.firstPublicEvent=await this.getFirstPublicEvent(),i.firstRelease=await this.getFirstRelease(),i.firstComment=await this.getFirstComment(),i.firstWatch=await this.getFirstWatch(),i.firstContribution=await this.getFirstContribution()}catch(a){_.warning(`Partial fetch \u2013 some data may be missing: ${a}`)}return i}async getAccountCreated(){let{data:e}=await this.octokit.users.getByUsername({username:this.username});return e.created_at??null}async getFirstRepository(){let{data:e}=await this.octokit.repos.listForUser({username:this.username,sort:"created",direction:"asc",per_page:1});return e?.[0]?{name:e[0].name,created_at:e[0].created_at}:null}async getFirstCommit(){let e=await this.getFirstRepository();if(!e)return null;let{data:r}=await this.octokit.repos.listCommits({owner:this.username,repo:e.name,per_page:1,sort:"author-date",direction:"asc"}),i=r?.[0];return i?{sha:i.sha,commit:i.commit}:null}async getFirstIssue(){let{data:e}=await this.octokit.search.issuesAndPullRequests({q:`author:${this.username}+type:issue`,sort:"created",order:"asc",per_page:1}),r=e?.items?.[0];return r?{issue_number:r.number,created_at:r.created_at}:null}async getFirstPullRequest(){let{data:e}=await this.octokit.search.issuesAndPullRequests({q:`author:${this.username}+type:pr`,sort:"created",order:"asc",per_page:1}),r=e?.items?.[0];return r?{pr_number:r.number,created_at:r.created_at}:null}async getFirstGist(){let{data:e}=await this.octokit.gists.listForUser({username:this.username,per_page:1,sort:"created",direction:"asc"}),r=e?.[0];return r?{id:r.id,created_at:r.created_at}:null}async getFirstStarredRepo(){let{data:e}=await this.octokit.activity.listReposStarredByUser({username:this.username,per_page:1,sort:"created",direction:"asc"}),r=e?.[0];return r?{full_name:r.full_name,created_at:r.created_at}:null}async getFirstWorkflowRun(){let{data:e}=await this.octokit.actions.listWorkflowRunsForUser({username:this.username,per_page:1,sort:"created",direction:"asc"}),r=e?.workflow_runs?.[0];return r?{name:r.name??"Unnamed",created_at:r.created_at}:null}async getFirstFork(){let{data:e}=await this.octokit.repos.listForUser({username:this.username,type:"forks",sort:"created",direction:"asc",per_page:1}),r=e?.[0];return r?{name:r.name,created_at:r.created_at}:null}async getFirstOrganization(){let{data:e}=await this.octokit.orgs.listForUser({username:this.username,per_page:1}),r=e?.[0];return r?{login:r.login}:null}async getFirstFollowing(){let{data:e}=await this.octokit.users.listFollowingForAuthenticatedUser({per_page:1}),r=e?.[0];return r?{login:r.login}:null}async getFirstFollower(){let{data:e}=await this.octokit.users.listFollowersForUser({username:this.username,per_page:1}),r=e?.[0];return r?{login:r.login}:null}async getFirstPublicEvent(){let r=1,i=null;for(;;){let{data:a}=await this.octokit.activity.listPublicEventsForUser({username:this.username,per_page:100,page:r});if(!a.length)break;let l=a[a.length-1];if(i={type:l.type,created_at:l.created_at},a.length<100)break;r++}return i}async getFirstRelease(){let e=await this.getFirstRepository();if(!e)return null;let{data:r}=await this.octokit.repos.listReleases({owner:this.username,repo:e.name,per_page:1,sort:"created",direction:"asc"}),i=r?.[0];return i?{tag_name:i.tag_name,created_at:i.created_at}:null}async getFirstComment(){let{data:e}=await this.octokit.search.issuesAndPullRequests({q:`commenter:${this.username}`,sort:"created",order:"asc",per_page:1}),r=e?.items?.[0];return r?{issue_number:r.number,created_at:r.created_at}:null}async getFirstWatch(){let{data:e}=await this.octokit.activity.listReposWatchedByUser({username:this.username,per_page:1,sort:"created",direction:"asc"}),r=e?.[0];return r?{full_name:r.full_name,created_at:r.created_at}:null}async getFirstContribution(){let{data:e}=await this.octokit.search.issuesAndPullRequests({q:`author:${this.username}+type:pr`,sort:"created",order:"asc",per_page:1}),r=e?.items?.[0];return r?{type:"PR",repo:r.repository_url?.replace("https://api.github.com/repos/","")??"unknown",created_at:r.created_at}:null}};function s(t){if(!t)return"Unknown date";try{return new Date(t).toLocaleDateString()}catch{return String(t)}}function $(t){let e=[];if(e.push(`\u{1F4CA} First Everything Report for @${t.username}`),e.push("=".repeat(60)),t.accountCreated&&e.push(`\u{1F464} Account created: ${s(t.accountCreated)}`),t.firstRepository&&e.push(`\u{1F4C2} First repository: ${t.firstRepository.name} (${s(t.firstRepository.created_at)})`),t.firstCommit){let i=t.firstCommit.commit.author?.date??t.firstCommit.commit.committer?.date??"Unknown date";e.push(`\u{1F4BE} First commit: ${t.firstCommit.sha.substring(0,7)} (${s(i)})`)}if(t.firstIssue&&e.push(`\u{1F41B} First issue: #${t.firstIssue.issue_number} (${s(t.firstIssue.created_at)})`),t.firstPullRequest&&e.push(`\u{1F500} First PR: #${t.firstPullRequest.pr_number} (${s(t.firstPullRequest.created_at)})`),t.firstGist&&e.push(`\u{1F4DD} First gist: ${t.firstGist.id} (${s(t.firstGist.created_at)})`),t.firstStarredRepo){let i=t.firstStarredRepo.starred_at??t.firstStarredRepo.created_at??"Unknown date";e.push(`\u2B50 First starred repo: ${t.firstStarredRepo.full_name} (${s(i)})`)}t.firstWorkflowRun&&e.push(`\u26A1 First workflow run: ${t.firstWorkflowRun.name} (${s(t.firstWorkflowRun.created_at)})`),t.firstFork&&e.push(`\u{1F374} First fork: ${t.firstFork.name} (${s(t.firstFork.created_at)})`),t.firstOrganization&&e.push(`\u{1F3E2} First organization: ${t.firstOrganization.login}`),t.firstFollowing&&e.push(`\u{1F465} First following: ${t.firstFollowing.login}`),t.firstFollower&&e.push(`\u{1F465} First follower: ${t.firstFollower.login}`),t.firstPublicEvent&&e.push(`\u{1F4C5} First public event: ${t.firstPublicEvent.type} (${s(t.firstPublicEvent.created_at)})`),t.firstRelease&&e.push(`\u{1F680} First release: ${t.firstRelease.tag_name} (${s(t.firstRelease.created_at)})`),t.firstComment&&e.push(`\u{1F4AC} First comment: On issue #${t.firstComment.issue_number} (${s(t.firstComment.created_at)})`),t.firstWatch&&e.push(`\u{1F440} First watched repo: ${t.firstWatch.full_name} (${s(t.firstWatch.created_at)})`),t.firstContribution&&e.push(`\u{1F91D} First contribution: ${t.firstContribution.type} to ${t.firstContribution.repo} (${s(t.firstContribution.created_at)})`);let r=Object.keys(t).filter(i=>i!=="username"&&t[i]!=null).length;return e.push(`
\u{1F50D} Found ${r} different "first" items!`),e.join(`
`)}async function C(){try{let t=n.getInput("username",{required:!0}).trim(),e=n.getInput("token",{required:!0}).trim(),r=u.getOctokit(e),l=u.context.ref.replace(/^refs\/[^/]+\//,"");if(!t)throw new Error("Username cannot be empty");if(!e)throw new Error("Token cannot be empty");if(!/^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$/i.test(t))throw new Error("Invalid GitHub username format");n.info(`\u{1F50D} Analyzing GitHub user: ${t}`);let p=await new c().fetchFirstEverything(t,e),m=$(p);n.setOutput("results",JSON.stringify(p,null,2)),n.setOutput("summary",m);let d=await import("fs"),g=(await import("path")).resolve(process.env.GITHUB_STEP_SUMMARY||"");if(g){let w=await d.promises.readFile(g,"utf8");await d.promises.writeFile(g,w+`
`+m)}n.info(m),n.info("\u2705 Successfully fetched all first items!")}catch(t){let e=t instanceof Error?t.message:String(t);n.setFailed(e)}}require.main===module&&C();
//# sourceMappingURL=index.js.map
